void gg_log(string s) {
  TriggerDebugOutput(1, StringToText(s), true);
}

void gg_gameOver_victory(int player) {
  GameOver(player, c_gameOverVictory, true, true);
}
void gg_gameOver_defeat(int player) {
  GameOver(player, c_gameOverDefeat, true, true);
}
void gg_gameOver_tie(int player) {
  GameOver(player, c_gameOverTie, true, true);
}

// playerIndex -1..15
void gg_setPlayerMinerals(int player, int amount) {
  PlayerModifyPropertyInt(player, c_playerPropMinerals, c_playerPropOperSetTo, amount);
}
void gg_setPlayerVespene(int player, int amount) {
  PlayerModifyPropertyInt(player, c_playerPropVespene, c_playerPropOperSetTo, amount);
}
void gg_incPlayerMinerals(int player, int amount) {
  PlayerModifyPropertyInt(player, c_playerPropMinerals, c_playerPropOperAdd, amount);
}
void gg_incPlayerVespene(int player, int amount) {
  PlayerModifyPropertyInt(player, c_playerPropVespene, c_playerPropOperAdd, amount);
}
void gg_createVisibilityRevealer(int player, region reg) {
  VisRevealerCreate(player, reg);
}

point gg_pointFromRegion(region reg, string regionLocation) {
  if (StringEqual(regionLocation, "random", c_stringNoCase)) {
    return RegionRandomPoint(reg);
  } else if (StringEqual(regionLocation, "center", c_stringNoCase)) {
    return RegionGetCenter(reg);
  } else {
    gg_log("gg_pointFromRegion invalid regionLocation.");
    return RegionRandomPoint(reg);
  }
}

// With default facing in center of region.
unit gg_createUnitAtPoint(int playerId, string unitName, point p) {
  // > What are the remaining int args?
  libNtve_gf_CreateUnitsWithDefaultFacing(1, unitName, 0, playerId, p);
  return UnitLastCreated();
}
unitgroup gg_createUnitsAtPoint(int playerId, string unitName, int amount, point p) {
  libNtve_gf_CreateUnitsWithDefaultFacing(amount, unitName, 0, playerId, p);
  return UnitLastCreatedGroup();
}

abilcmd gg_abilityCommandFromString(string commandName) {
  if (StringEqual(commandName, "move", c_stringNoCase)) {
    return AbilityCommand("move", 0);
  }
  if (StringEqual(commandName, "dance", c_stringNoCase)) {
    return AbilityCommand("stop", 3);
  }
  if (StringEqual(commandName, "barracks train marine", c_stringNoCase)) {
    return AbilityCommand("BarracksTrain", 0);
  }
  if (StringEqual(commandName, "barracks train reaper", c_stringNoCase)) {
    return AbilityCommand("BarracksTrain", 1);
  }
  if (StringEqual(commandName, "barracks train marauder", c_stringNoCase)) {
    return AbilityCommand("BarracksTrain", 3);
  }
  if (StringEqual(commandName, "attack", c_stringNoCase)) {
    return AbilityCommand("attack", 0);
  }
  gg_log("Missing commandName name in gg_abilityCommandFromString");
  return AbilityCommand("move", 0);
}
int gg_abilityOrderQueueFromString(string s) {
  if (StringEqual(s, "replace", c_stringNoCase)) {
    return c_orderQueueReplace;
  }
  if (StringEqual(s, "addtoend", c_stringNoCase)) {
    return c_orderQueueAddToEnd;
  }
  gg_log("Missing s in gg_abilityOrderQueueFromString");
  return c_orderQueueAddToEnd;
}

void gg_issueOrder(unit u, string cmd, string p) {
  UnitIssueOrder(u, Order(gg_abilityCommandFromString(cmd)),
                 gg_abilityOrderQueueFromString(p));
}
void gg_issueOrderToPoint(unit u, string cmd, point pt, string p) {
  UnitIssueOrder(u, OrderTargetingPoint(gg_abilityCommandFromString(cmd), pt),
                 gg_abilityOrderQueueFromString(p));
}
void gg_groupIssueOrder(unitgroup ug, string cmd, string p) {
  UnitGroupIssueOrder(ug, Order(gg_abilityCommandFromString(cmd)),
                      gg_abilityOrderQueueFromString(p));
}
void gg_groupIssueOrderToPoint(unitgroup ug, string cmd, point pt, string p) {
  UnitGroupIssueOrder(ug, OrderTargetingPoint(gg_abilityCommandFromString("move"), pt),
                      gg_abilityOrderQueueFromString(p));
}

void gg_killUnit(unit u) {
  // > UnitKill() exists.
  UnitSetPropertyFixed(u, c_unitPropLife, 0.0);
}

// Setting a unitref to null makes the event trigger for any unit.
// Note that regions may not be null, so events cannot trigger for any region.
void gg_event_unitEnteredRegion(string callback, unitref u, region reg) {
  TriggerAddEventUnitRegion(TriggerCreate(callback), u, reg, true);
}
void gg_event_unitLeftRegion(string callback, unitref u, region reg) {
  TriggerAddEventUnitRegion(TriggerCreate(callback), u, reg, false);
}
void gg_event_unitTrained(string callback, unitref u) {
  TriggerAddEventUnitTrainProgress(TriggerCreate(callback), u, c_unitProgressStageComplete);
}
void gg_event_unitConstructed(string callback, unitref u) {
  TriggerAddEventUnitConstructProgress(TriggerCreate(callback), u, c_unitProgressStageComplete);
}
void gg_event_unitDied(string callback, unitref u) {
  TriggerAddEventUnitDied(TriggerCreate(callback), u);
}

timer gg_timer_createRepeating(fixed interval, string callback) {
  timer t = TimerCreate();
  TimerStart(t, interval, true, c_timeGame);
  TriggerAddEventTimer(TriggerCreate(callback), t);
  return t;
}
timer gg_timer_create(fixed interval, string callback) {
  timer t = TimerCreate();
  TimerStart(t, interval, false, c_timeGame);
  TriggerAddEventTimer(TriggerCreate(callback), t);
  return t;
}

void gg_LibraryInit() {
}
